<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Product Management â€“ Admin Dashboard</title>
    <link rel="stylesheet" href="/css/admin/category.css" />
    <link rel="stylesheet" href="/css/admin/admin.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
      /* Modal styles for offer */
      .offer-modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
      }
      
      .offer-modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border-radius: 8px;
        width: 400px;
        max-width: 90%;
        text-align: center;
      }
      
      .offer-modal h3 {
        margin-bottom: 20px;
        color: #333;
      }
      
      .offer-input-group {
        margin-bottom: 20px;
      }
      
      .offer-input-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        text-align: left;
      }
      
      .offer-input-group input {
        width: 100%;
        padding: 10px;
        border: 2px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
      }
      
      .offer-input-group input:focus {
        outline: none;
        border-color: #007bff;
      }
      
      .offer-modal-buttons {
        display: flex;
        gap: 10px;
        justify-content: center;
      }
      
      .offer-modal-buttons button {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 600;
      }
      
      .offer-confirm-btn {
        background-color: #28a745;
        color: white;
      }
      
      .offer-cancel-btn {
        background-color: #6c757d;
        color: white;
      }
      
      .offer-error {
        color: #dc3545;
        font-size: 14px;
        margin-top: 5px;
        text-align: left;
      }
    </style>
  </head>
  <body>
    <%- include('../partials/admin/header') %>

    <div class="container">
      <div class="header">
        <h1>PRODUCT MANAGEMENT</h1>
        <p>Manage your products efficiently</p>
      </div>

      <!-- Controls (search + add) -->
      <div class="controls">
        <form method="GET" action="/admin/product" class="search-container">
          <input
            type="text"
            id="searchInput"
            class="search-input"
            name="search"
            value="<%= search || '' %>"
            placeholder="Search products..."
          />
          <button type="submit" class="btn btn-secondary">Search</button>
          <button
            type="button"
            class="btn btn-secondary"
            onclick="window.location.href='/admin/product'"
          >
            Reset
          </button>
        </form>

        <a href="/admin/product/add">
          <button class="btn btn-primary"><span>+</span> Add Product</button>
        </a>
      </div>

      <!-- Product Table -->
      <div class="table-container">
        <table class="table" id="productTable">
          <thead>
            <tr>
              <th>S.NO</th>
              <th>PRODUCT NAME</th>
              <th>CATEGORY</th>
              <th>BRAND</th>
              <th>STOCK</th>
              <th>REGULAR PRICE</th>
              <th>SALE PRICE</th>
              <th>Offer</th>
              <th>Offer type</th>
              <th>IMAGES</th>
              <th>ACTIONS</th>
            </tr>
          </thead>
          <tbody id="productTableBody">
            <% if (!products || products.length === 0) { %>
            <tr>
              <td colspan="11" class="no-data">
                <div>ðŸ“‚</div>
                <h3>No products found</h3>
                <p>Try a different search or add a new product</p>
              </td>
            </tr>
            <% } else { %> 
            <% products.forEach((product, index) => { %>
            <tr>
              <td>
                <%= ((currentPage || 1) - 1) * (limit || 10) + index + 1 %>
              </td>
              <td><%= product.productName || 'N/A' %></td>
              <td><%= product.category ? product.category.name : 'N/A' %></td>
              <td><%= product.brand ? product.brand.brandName : 'N/A' %></td>
              <td><%= product.stock != null ? product.stock : 'N/A' %></td>
              <td>
                â‚¹<%= product.regularPrice != null ? product.regularPrice.toFixed(2) : 'N/A' %>
              </td>
              <td>
                â‚¹<%= product.salePrice != null ? product.salePrice.toFixed(2) : 'N/A' %>
              </td>
              <td>
                <span style="color: rgb(206, 2, 2); font-size: large;">
                  <%= product.productOffer != null ? product.productOffer : 'N/A' %>%
                </span>
              </td>
              <td>
                <span style="color: rgb(206, 2, 2); font-size: large;">
                  <%= product.appliedOfferType != null ? product.appliedOfferType : 'N/A' %>
                </span>
              </td>
              <td>
                <% if (product.productImage && product.productImage.length > 0) { %>
                <img
                  src="/<%= product.productImage[0].path %>"
                  alt="Product Image"
                  style="
                    width: 50px;
                    height: 50px;
                    object-fit: cover;
                    margin-right: 5px;
                  "
                />
                <% } else { %> No Images <% } %>
              </td>
              <td>
                <div class="action-buttons">
                  <a href="/admin/product/edit?id=<%= product._id || '' %>">
                    <button class="btn btn-warning btn-sm">Edit</button>
                  </a>
                  <% if (product.isBlocked === false) { %>
                  <a
                    href="/admin/product/block?id=<%= product._id || '' %>"
                    class="delete-link"
                  >
                    <button class="btn btn-danger btn-sm">block</button>
                  </a>
                  <% } else { %>
                  <a
                    href="/admin/product/unblock?id=<%= product._id || '' %>"
                  >
                    <button class="btn btn-success btn-sm">Unblock</button>
                  </a>
                  <% } %>
                  <!-- Offer Management Buttons -->
                  <% if (product.productOffer && product.productOffer > 0) { %>
                    <button 
                      class="btn btn-secondary btn-sm remove-offer-btn" 
                      data-product-id="<%= product._id || '' %>"
                    >
                      Remove Offer
                    </button>
                  <% } else { %>
                    <button 
                      class="btn btn-info btn-sm add-offer-btn" 
                      data-product-id="<%= product._id || '' %>"
                    >
                      Add Offer
                    </button>
                  <% } %>
                </div>
              </td>
            </tr>
            <% }) %> 
            <% } %>
          </tbody>
        </table>
      </div>

      <!-- Pagination -->
      <div class="pagination" id="pagination">
        <% const pages = totalPages || 1; %> 
        <% for (let i = 1; i <= pages; i++) { %>
        <button class="page-btn <%= i === (currentPage || 1) ? 'active' : '' %>" data-page="<%= i %>">
          <%= i %>
        </button>
        <% } %>
      </div>
    </div>

    <!-- Offer Modal -->
    <div id="offerModal" class="offer-modal">
      <div class="offer-modal-content">
        <h3>Add Product Offer</h3>
        <div class="offer-input-group">
          <label for="offerPercentage">Offer Percentage (0-100):</label>
          <input type="number" id="offerPercentage" min="0" max="100" step="1" placeholder="Enter percentage">
          <div id="offerError" class="offer-error" style="display: none;"></div>
        </div>
        <div class="offer-modal-buttons">
          <button class="offer-confirm-btn" id="confirmOffer">Add Offer</button>
          <button class="offer-cancel-btn" id="cancelOffer">Cancel</button>
        </div>
      </div>
    </div>

    <script src="/js/admin/adminNav.js"></script>

    <script>
      // Delete confirmation
      document.querySelectorAll(".delete-link").forEach((link) => {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          const url = link.href;
          Swal.fire({
            title: "Are you sure?",
            text: "You are about to delete this product.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, delete",
            reverseButtons: true,
          }).then((result) => {
            if (result.isConfirmed) window.location.href = url;
          });
        });
      });

      // Remove offer functionality
      document.querySelectorAll(".remove-offer-btn").forEach(btn => {
        btn.addEventListener("click", (e) => {
          const productId = e.target.getAttribute('data-product-id');
          
          Swal.fire({
            title: "Remove Offer?",
            text: "Are you sure you want to remove this product offer?",
            icon: "question",
            showCancelButton: true,
            confirmButtonColor: "#28a745",
            cancelButtonColor: "#6c757d",
            confirmButtonText: "Yes, remove offer",
            reverseButtons: true,
          }).then((result) => {
            if (result.isConfirmed) {
              // Send POST request to remove offer
              fetch('/admin/product/removeOffer', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id: productId })
              })
              .then(response => response.json())
              .then(data => {
                if (data.success) {
                  Swal.fire({
                    title: "Success!",
                    text: data.message,
                    icon: "success",
                    confirmButtonColor: "#28a745"
                  }).then(() => {
                    window.location.reload();
                  });
                } else {
                  Swal.fire({
                    title: "Error!",
                    text: data.message || "Failed to remove offer",
                    icon: "error",
                    confirmButtonColor: "#d33"
                  });
                }
              })
              .catch(error => {
                Swal.fire({
                  title: "Error!",
                  text: "Something went wrong: " + error.message,
                  icon: "error",
                  confirmButtonColor: "#d33"
                });
              });
            }
          });
        });
      });

      // Offer modal functionality
      const offerModal = document.getElementById('offerModal');
      const offerInput = document.getElementById('offerPercentage');
      const offerError = document.getElementById('offerError');
      const confirmOfferBtn = document.getElementById('confirmOffer');
      const cancelOfferBtn = document.getElementById('cancelOffer');
      let currentProductId = null;

      // Open modal when add offer button is clicked
      document.querySelectorAll('.add-offer-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          currentProductId = e.target.getAttribute('data-product-id');
          offerModal.style.display = 'block';
          offerInput.focus();
          // Reset form
          offerInput.value = '';
          offerError.style.display = 'none';
        });
      });

      // Close modal when cancel is clicked
      cancelOfferBtn.addEventListener('click', () => {
        offerModal.style.display = 'none';
        currentProductId = null;
      });

      // Close modal when clicking outside
      window.addEventListener('click', (e) => {
        if (e.target === offerModal) {
          offerModal.style.display = 'none';
          currentProductId = null;
        }
      });

      // Validate and submit offer
      confirmOfferBtn.addEventListener('click', () => {
        const percentage = parseFloat(offerInput.value);
        
        // Validation
        if (!offerInput.value.trim()) {
          showOfferError('Please enter an offer percentage');
          return;
        }
        
        if (isNaN(percentage)) {
          showOfferError('Please enter a valid number');
          return;
        }
        
        if (percentage < 0 || percentage > 100) {
          showOfferError('Offer percentage must be between 0 and 100');
          return;
        }
        
        if (!Number.isInteger(percentage)) {
          showOfferError('Please enter a whole number');
          return;
        }
        
        if (percentage === 0) {
          showOfferError('Offer percentage must be greater than 0');
          return;
        }
        
        // If validation passes, send POST request
        if (currentProductId) {
          fetch('/admin/product/addOffer', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
              id: currentProductId, 
              offer: percentage 
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire({
                title: "Success!",
                text: data.message,
                icon: "success",
                confirmButtonColor: "#28a745"
              }).then(() => {
                window.location.reload();
              });
            } else {
              showOfferError(data.message || "Failed to add offer");
            }
          })
          .catch(error => {
            showOfferError('Something went wrong: ' + error.message);
          });
        }
      });

      // Handle Enter key in input
      offerInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          confirmOfferBtn.click();
        }
      });

      // Clear error when user starts typing
      offerInput.addEventListener('input', () => {
        if (offerError.style.display !== 'none') {
          offerError.style.display = 'none';
        }
      });

      function showOfferError(message) {
        offerError.textContent = message;
        offerError.style.display = 'block';
        offerInput.focus();
      }

      // AJAX Pagination
      const productTableBody = document.getElementById('productTableBody');
      const pagination = document.getElementById('pagination');

      async function loadProducts(page) {
        try {
          const search = document.getElementById('searchInput').value;
          const response = await fetch(`/admin/product?page=${page}&search=${encodeURIComponent(search)}`, {
            headers: {
              'X-Requested-With': 'XMLHttpRequest',
            },
          });
          const data = await response.json();

          // Update table body
          productTableBody.innerHTML = data.products.length === 0
            ? `
              <tr>
                <td colspan="11" class="no-data">
                  <div>ðŸ“‚</div>
                  <h3>No products found</h3>
                  <p>Try a different search or add a new product</p>
                </td>
              </tr>
            `
            : data.products.map((product, index) => `
              <tr>
                <td>${(data.currentPage - 1) * data.limit + index + 1}</td>
                <td>${product.productName || 'N/A'}</td>
                <td>${product.category ? product.category.name : 'N/A'}</td>
                <td>${product.brand ? product.brand.brandName : 'N/A'}</td>
                <td>${product.stock != null ? product.stock : 'N/A'}</td>
                <td>â‚¹${product.regularPrice != null ? product.regularPrice.toFixed(2) : 'N/A'}</td>
                <td>â‚¹${product.salePrice != null ? product.salePrice.toFixed(2) : 'N/A'}</td>
                <td><span style="color: rgb(206, 2, 2); font-size: large;">${product.productOffer != null ? product.productOffer : 'N/A'}%</span></td>
                <td><span style="color: rgb(206, 2, 2); font-size: large;">${product.appliedOfferType != null ? product.appliedOfferType : 'N/A'}</span></td>
                <td>
                  ${product.productImage && product.productImage.length > 0
                    ? `<img src="/${product.productImage[0].path}" alt="Product Image" style="width: 50px; height: 50px; object-fit: cover; margin-right: 5px;" />`
                    : 'No Images'}
                </td>
                <td>
                  <div class="action-buttons">
                    <a href="/admin/product/edit?id=${product._id || ''}">
                      <button class="btn btn-warning btn-sm">Edit</button>
                    </a>
                    ${product.isBlocked === false
                      ? `<a href="/admin/product/block?id=${product._id || ''}" class="delete-link">
                          <button class="btn btn-danger btn-sm">block</button>
                        </a>`
                      : `<a href="/admin/product/unblock?id=${product._id || ''}">
                          <button class="btn btn-success btn-sm">Unblock</button>
                        </a>`
                    }
                    ${product.productOffer && product.productOffer > 0
                      ? `<button class="btn btn-secondary btn-sm remove-offer-btn" data-product-id="${product._id || ''}">
                          Remove Offer
                        </button>`
                      : `<button class="btn btn-info btn-sm add-offer-btn" data-product-id="${product._id || ''}">
                          Add Offer
                        </button>`
                    }
                  </div>
                </td>
              </tr>
            `).join('');

          // Update pagination
          pagination.innerHTML = Array.from({ length: data.totalPages }, (_, i) => i + 1)
            .map(i => `
              <button class="page-btn ${i === data.currentPage ? 'active' : ''}" data-page="${i}">
                ${i}
              </button>
            `).join('');

          // Re-attach pagination event listeners
          attachPaginationListeners();

          // Re-attach existing event listeners for delete links
          document.querySelectorAll(".delete-link").forEach((link) => {
            link.removeEventListener('click', handleDelete); // Remove old listeners to prevent duplicates
            link.addEventListener('click', handleDelete);
          });

          // Re-attach existing event listeners for offer buttons
          document.querySelectorAll(".remove-offer-btn").forEach(btn => {
            btn.removeEventListener('click', handleRemoveOffer); // Remove old listeners
            btn.addEventListener('click', handleRemoveOffer);
          });

          document.querySelectorAll('.add-offer-btn').forEach(btn => {
            btn.removeEventListener('click', handleAddOffer); // Remove old listeners
            btn.addEventListener('click', handleAddOffer);
          });
        } catch (error) {
          console.error('Error loading products:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to load products. Please try again.',
            confirmButtonColor: '#d33',
          });
        }
      }

      // Store original event handlers to re-attach them
      const handleDelete = (e) => {
        e.preventDefault();
        const url = e.target.closest('a').href;
        Swal.fire({
          title: "Are you sure?",
          text: "You are about to delete this product.",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#d33",
          cancelButtonColor: "#3085d6",
          confirmButtonText: "Yes, delete",
          reverseButtons: true,
        }).then((result) => {
          if (result.isConfirmed) window.location.href = url;
        });
      };

      const handleRemoveOffer = (e) => {
        const productId = e.target.getAttribute('data-product-id');
        Swal.fire({
          title: "Remove Offer?",
          text: "Are you sure you want to remove this product offer?",
          icon: "question",
          showCancelButton: true,
          confirmButtonColor: "#28a745",
          cancelButtonColor: "#6c757d",
          confirmButtonText: "Yes, remove offer",
          reverseButtons: true,
        }).then((result) => {
          if (result.isConfirmed) {
            fetch('/admin/product/removeOffer', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ id: productId })
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                Swal.fire({
                  title: "Success!",
                  text: data.message,
                  icon: "success",
                  confirmButtonColor: "#28a745"
                }).then(() => {
                  window.location.reload();
                });
              } else {
                Swal.fire({
                  title: "Error!",
                  text: data.message || "Failed to remove offer",
                  icon: "error",
                  confirmButtonColor: "#d33"
                });
              }
            })
            .catch(error => {
              Swal.fire({
                title: "Error!",
                text: "Something went wrong: " + error.message,
                icon: "error",
                confirmButtonColor: "#d33"
              });
            });
          }
        });
      };

      const handleAddOffer = (e) => {
        currentProductId = e.target.getAttribute('data-product-id');
        offerModal.style.display = 'block';
        offerInput.focus();
        offerInput.value = '';
        offerError.style.display = 'none';
      };

      // Attach pagination event listeners
      function attachPaginationListeners() {
        document.querySelectorAll('.page-btn').forEach(button => {
          button.addEventListener('click', (e) => {
            e.preventDefault();
            const page = e.target.dataset.page;
            loadProducts(page);
          });
        });
      }

      // Initial attachment of pagination listeners
      attachPaginationListeners();
    </script>
  </body>
</html>