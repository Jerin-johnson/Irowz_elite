<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart | Irowz Elite</title>
    <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn-uicons.flaticon.com/uicons-regular-straight/css/uicons-regular-straight.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"></script>
   <%- include('../partials/userprofile/style') %>
    <style>
        .cart-container {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 30px;
            margin-top: 20px;
        }
        
        .cart-items {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 0;
            overflow: hidden;
        }
        
        .cart-header {
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .cart-item {
            display: grid;
            grid-template-columns: 100px 1fr auto;
            gap: 20px;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            align-items: center;
        }
        
        .cart-item:last-child {
            border-bottom: none;
        }
        
        .item-image {
            width: 100px;
            height: 100px;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .item-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .item-details {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .item-name {
            font-weight: 600;
            color: #333;
            margin: 0;
            font-size: 16px;
        }
        
        .item-price {
            color: #b4883e;
            font-weight: 700;
            font-size: 18px;
        }
        
        .item-original-price {
            color: #999;
            text-decoration: line-through;
            font-size: 14px;
        }
        
        .item-stock {
            font-size: 12px;
            color: #28a745;
            font-weight: 600;
        }
        
        .item-stock.low {
            color: #ffc107;
        }
        
        .item-stock.out {
            color: #dc3545;
        }
        
        .item-actions {
            display: flex;
            flex-direction: column;
            gap: 15px;
            align-items: flex-end;
        }
        
        .quantity-controls {
            display: flex;
            align-items: center;
            border: 1px solid #ddd;
            border-radius: 4px;
            overflow: hidden;
        }
        
        .qty-btn {
            background: #f8f9fa;
            border: none;
            padding: 8px 12px;
            cursor: pointer;
            transition: background 0.3s ease;
        }
        
        .qty-btn:hover:not(:disabled) {
            background: #e9ecef;
        }
        
        .qty-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .qty-input {
            border: none;
            padding: 8px 12px;
            width: 60px;
            text-align: center;
            outline: none;
        }
        
        .item-total {
            font-size: 18px;
            font-weight: 700;
            color: #333;
        }
        
        .item-remove {
            background: none;
            border: none;
            color: #dc3545;
            cursor: pointer;
            padding: 5px;
            transition: color 0.3s ease;
        }
        
        .item-remove:hover {
            color: #a71e2a;
        }
        
        .cart-summary {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
            height: fit-content;
            position: sticky;
            top: 20px;
        }
        
        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            padding-bottom: 10px;
        }
        
        .summary-row.total {
            border-top: 1px solid #e9ecef;
            padding-top: 15px;
            font-size: 18px;
            font-weight: 700;
            color: #333;
        }
        
        .checkout-btn {
            width: 100%;
            background: #b4883e;
            color: white;
            border: none;
            padding: 15px;
            border-radius: 4px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s ease;
            margin-bottom: 15px;
        }
        
        .checkout-btn:hover:not(:disabled) {
            background: #8e6b2f;
        }
        
        .checkout-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        
        .empty-cart {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }
        
        .empty-cart i {
            font-size: 64px;
            color: #ddd;
            margin-bottom: 20px;
        }
        
        /* Mobile Responsive */
        @media (max-width: 1024px) {
            .cart-container {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .cart-summary {
                position: static;
                order: -1;
            }
        }
        
        @media (max-width: 768px) {
            .cart-item {
                grid-template-columns: 80px 1fr;
                gap: 15px;
            }
            
            .item-actions {
                grid-column: 1 / -1;
                flex-direction: row;
                justify-content: space-between;
                align-items: center;
                margin-top: 15px;
                padding-top: 15px;
                border-top: 1px solid #e9ecef;
            }
        }
    </style>
</head>
<body>
    <%- include('../partials/userprofile/header') %>
    
    <div class="container">
        <!-- Breadcrumbs -->
        <nav aria-label="breadcrumb" class="mt-4">
            <ol class="breadcrumb" style="background: none; padding: 0; margin: 0; list-style: none; display: flex; gap: 5px;">
                <li class="breadcrumb-item"><a href="/" style="color: #b4883e; text-decoration: none;">Home</a></li>
                <li style="color: #666;"> > </li>
                <li class="breadcrumb-item active" style="color: #333;">Shopping Cart</li>
            </ol>
        </nav>

        <% if (cart && cart.items && cart.items.length > 0) { %>
        <div class="cart-container" id="cartContainer">
            <!-- Cart Items -->
            <div class="cart-items">
                <div class="cart-header">
                    <h2 style="margin: 0; color: #333;">Shopping Cart (<%= itemCount %> items)</h2>
                    <button class="btn btn-outline-danger btn-sm" onclick="clearCart()">
                        <i class="fas fa-trash"></i> Clear Cart
                    </button>
                </div>

                <% cart.items.forEach((item, index) => { %>
                <div class="cart-item" data-id="<%= item.productId._id %>">
                    <div class="item-image">
                        <a href="/product/details/<%= item.productId._id %>">
                            <img src="<%= item.productId.productImage && item.productId.productImage.length > 0 ? item.productId.productImage[0].path : '/placeholder.svg?height=100&width=100' %>" 
                             alt="<%= item.productId.productName %>">
                        </a>
                    </div>
                    <div class="item-details">
                        <h3 class="item-name"><%= item.productId.productName %></h3>
                        <div class="item-price">
                           ₹<%= item.totalPrice.toFixed(2) %>
                            <% if (item.productId.regularPrice > item.price) { %>
                                <span class="item-original-price">₹<%= item.productId.regularPrice.toFixed(2) %></span>
                            <% } %>
                        </div>
                        <div class="item-stock <%= item.productId.stock <= 5 ? (item.productId.stock === 0 ? 'out' : 'low') : '' %>">
                            <% if (item.productId.stock === 0) { %>
                                ❌ Out of Stock
                            <% } else if (item.productId.stock <= 5) { %>
                                ⚠ Only <%= item.productId.stock %> left
                            <% } else { %>
                                ✓ In Stock
                            <% } %>
                        </div>
                    </div>
                    <div class="item-actions">
                        <div class="quantity-controls">
                            <button class="qty-btn" onclick="updateQuantity('<%= item.productId._id %>', -1)" 
                                    <%= item.quantity <= 1 ? 'disabled' : '' %>>-</button>
                            <input type="number" class="qty-input" value="<%= item.quantity %>" 
                                   min="1" max="<%= Math.min(10, item.productId.stock) %>" 
                                   onchange="updateQuantity('<%= item.productId._id %>', 0, this.value)">
                            <button class="qty-btn" onclick="updateQuantity('<%= item.productId._id %>', 1)" 
                                    <%= item.quantity >= Math.min(10, item.productId.stock) ? 'disabled' : '' %>>+</button>
                        </div>
                        <div class="item-total">₹<%= item.totalPrice.toFixed(2) %></div>
                        <button class="item-remove" onclick="removeItem('<%= item.productId._id %>')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                <% }); %>
            </div>

           
           
            <!-- Cart Summary -->
    
            <div class="cart-summary">
                <h3 style="margin: 0 0 20px; color: #333;">Order Summary</h3>
                
                <div class="summary-row">
                    <span class="summary-label">Subtotal (<%= itemCount %> items)</span>
                    <span class="summary-value">₹<%= subtotal %></span>
                </div>
                
                <% if (parseFloat(discount) > 0) { %>
                <div class="summary-row">
                    <span class="summary-label">Discount</span>
                    <span class="summary-value" style="color: #28a745;">-₹<%= discount %></span>
                </div>
                <% } %>

                <div class="summary-row">
         <span class="summary-label">Shipping</span>
          <% if (parseFloat(shipping) === 0) { %>
         <span class="summary-value" style="color: #28a745;">Free</span>
          <% } else { %>
        <span class="summary-value" style="color: #333;">₹<%= shipping %></span>
         <% } %>
        </div>

                
     

                
                <div class="summary-row">
                    <span class="summary-label">Tax</span>
                    <span class="summary-value">₹<%= tax %></span>
                </div>
                
                <div class="summary-row total">
                    <span>Total</span>
                    <span>₹<%= total %></span>
                </div>
                
                <% 
                const hasOutOfStockItems = cart.items.some(item => item.productId.stock === 0);
                %>
                <button class="checkout-btn" onclick="proceedToCheckout()" <%= hasOutOfStockItems ? 'disabled' : '' %>>
                    <i class="fas fa-lock"></i> 
                    <%= hasOutOfStockItems ? 'Remove Out of Stock Items' : 'Proceed to Checkout' %>
                </button>
                
                <a href="/shop" class="continue-shopping" style="width: 90%; background: transparent; color: #b4883e; border: 1px solid #b4883e; padding: 12px; border-radius: 4px; font-weight: 600; cursor: pointer; transition: all 0.3s ease; text-decoration: none; display: inline-block; text-align: center;">
                    <i class="fas fa-arrow-left"></i> Continue Shopping
                </a>
            </div>
        </div>
        <% } else { %>
        <!-- Empty Cart State -->
        <div class="empty-cart" id="emptyCart">
            <i class="fas fa-shopping-cart"></i>
            <h3>Your cart is empty</h3>
            <p>Looks like you haven't added anything to your cart yet</p>
            <a href="/shop" class="btn btn-primary">Start Shopping</a>
        </div>
        <% } %>
    </div>

   <%- include('../partials/userprofile/footer') %>

    <script>

        async function updateQuantity(productId, change, newValue = null) {
    try {
        const item = document.querySelector(`[data-id="${productId}"]`);
        const qtyInput = item.querySelector('.qty-input');
        
        let currentQty = parseInt(qtyInput.value);
        let newQty;
        
        if (newValue !== null) {
            newQty = parseInt(newValue);
        } else {
            newQty = currentQty + change;
        }
        
        const maxQty = parseInt(qtyInput.max) || 10;
        newQty = Math.max(1, Math.min(newQty, maxQty));
        
        const response = await fetch('/cart/update', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                productId: productId,
                quantity: newQty
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Update quantity input
            qtyInput.value = newQty;
            
            // Update BOTH item price locations
            // 1. Update item-price in item-details section
            const itemPriceElement = item.querySelector('.item-price');
            if (itemPriceElement) {
                // Update the main price (first text node)
                const priceText = itemPriceElement.firstChild;
                if (priceText && priceText.nodeType === Node.TEXT_NODE) {
                    priceText.textContent = `₹${data.itemTotal}`;
                } else {
                    // Fallback: replace entire content but preserve original price span
                    const originalPriceSpan = itemPriceElement.querySelector('.item-original-price');
                    const originalPriceHTML = originalPriceSpan ? originalPriceSpan.outerHTML : '';
                    itemPriceElement.innerHTML = `₹${data.itemTotal} ${originalPriceHTML}`;
                }
            }
            
            // 2. Update item-total in actions section
            item.querySelector('.item-total').textContent = `₹${data.itemTotal}`;
            
            // Update stock information if available in response
            if (data.productStock !== undefined) {
                const stockElement = item.querySelector('.item-stock');
                if (stockElement) {
                    // Remove existing classes
                    stockElement.classList.remove('low', 'out');
                    
                    if (data.productStock === 0) {
                        stockElement.classList.add('out');
                        stockElement.innerHTML = '❌ Out of Stock';
                    } else if (data.productStock <= 5) {
                        stockElement.classList.add('low');
                        stockElement.innerHTML = `⚠ Only ${data.productStock} left`;
                    } else {
                        stockElement.innerHTML = '✓ In Stock';
                    }
                }
                
                // Update max quantity for input
                qtyInput.max = Math.min(10, data.productStock);
            }
            
            // Update all summary values
            const summaryRows = document.querySelectorAll('.summary-row');
            
            // Update subtotal (first summary row)
            summaryRows[0].querySelector('.summary-value').textContent = `₹${data.subtotal}`;
            
            // Update discount (if exists)
            if (parseFloat(data.discount) > 0) {
                const discountRow = Array.from(summaryRows).find(row => 
                    row.querySelector('.summary-label').textContent.includes('Discount')
                );
                if (discountRow) {
                    discountRow.querySelector('.summary-value').textContent = `-₹${data.discount}`;
                }
            }
            
            // Update shipping
            const shippingRow = Array.from(summaryRows).find(row => 
                row.querySelector('.summary-label').textContent.includes('Shipping')
            );
            if (shippingRow) {
                const shippingValue = shippingRow.querySelector('.summary-value');
                if (parseFloat(data.shipping) === 0) {
                    shippingValue.textContent = 'Free';
                    shippingValue.style.color = '#28a745';
                } else {
                    shippingValue.textContent = `₹${data.shipping}`;
                    shippingValue.style.color = '#333';
                }
            }
            
            // Update tax
            const taxRow = Array.from(summaryRows).find(row => 
                row.querySelector('.summary-label').textContent.includes('Tax')
            );
            if (taxRow) {
                taxRow.querySelector('.summary-value').textContent = `₹${data.tax}`;
            }
            
            // Update total
            const totalRow = document.querySelector('.summary-row.total');
            totalRow.querySelector('span:last-child').textContent = `₹${data.total}`;
            
            // Update cart header item count
            const cartHeader = document.querySelector('.cart-header h2');
            if (cartHeader) {
                cartHeader.textContent = `Shopping Cart (${data.itemCount} items)`;
            }
            
            // Update quantity control buttons
            const decreaseBtn = item.querySelector('.qty-btn:first-child');
            const increaseBtn = item.querySelector('.qty-btn:last-child');
            
            decreaseBtn.disabled = newQty <= 1;
            increaseBtn.disabled = newQty >= Math.min(10, data.productStock || 10);
            
            // Update checkout button if there are out of stock items
            const checkoutBtn = document.querySelector('.checkout-btn');
            if (checkoutBtn && data.hasOutOfStockItems !== undefined) {
                if (data.hasOutOfStockItems) {
                    checkoutBtn.disabled = true;
                    checkoutBtn.innerHTML = '<i class="fas fa-lock"></i> Remove Out of Stock Items';
                } else {
                    checkoutBtn.disabled = false;
                    checkoutBtn.innerHTML = '<i class="fas fa-lock"></i> Proceed to Checkout';
                }
            }
            
        } else {
            swal("Error", data.message, "error");
            qtyInput.value = currentQty; // Reset to original value
        }
    } catch (error) {
        console.error('Error updating quantity:', error);
        swal("Error", "Failed to update quantity", "error");
    }
}

        

       
        
        async function removeItem(productId) {
            const result = await swal({
                title: "Remove Item?",
                text: "This item will be removed from your cart.",
                icon: "warning",
                buttons: {
                    cancel: "Cancel",
                    confirm: "Remove"
                },
                dangerMode: true,
            });
            
            if (result) {
                try {
                    const response = await fetch('/cart/remove', {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ productId })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        swal("Removed!", "Item has been removed from your cart.", "success")
                        .then(() => {
                            location.reload();
                        });
                    } else {
                        swal("Error", data.message, "error");
                    }
                } catch (error) {
                    console.error('Error removing item:', error);
                    swal("Error", "Failed to remove item", "error");
                }
            }
        }
        
        async function clearCart() {
            const result = await swal({
                title: "Clear Cart?",
                text: "This will remove all items from your cart.",
                icon: "warning",
                buttons: {
                    cancel: "Cancel",
                    confirm: "Clear All"
                },
                dangerMode: true,
            });
            
            if (result) {
                try {
                    const response = await fetch('/cart/clear', {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        swal("Cart Cleared!", "All items have been removed from your cart.", "success")
                        .then(() => {
                            location.reload();
                        });
                    } else {
                        swal("Error", data.message, "error");
                    }
                } catch (error) {
                    console.error('Error clearing cart:', error);
                    swal("Error", "Failed to clear cart", "error");
                }
            }
        }
        
        function proceedToCheckout() {
            // Check for out of stock items
            const hasOutOfStock = document.querySelector('.item-stock.out');
            if (hasOutOfStock) {
                swal("Cannot Proceed", "Please remove out of stock items before checkout.", "warning");
                return;
            }
            
            window.location.href = '/checkout';
        }
    </script>
</body>
</html>
