
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details | Irowz Elite</title>
    <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn-uicons.flaticon.com/uicons-regular-straight/css/uicons-regular-straight.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"></script>
    <%- include('../../partials/userprofile/style') %>
    <style>
        .order-detail-container {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 30px;
            margin-top: 20px;
        }
        
        .detail-section {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            overflow: hidden;
        }
        
        .section-header {
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
        }
        
        .section-header h3 {
            margin: 0;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .section-content {
            padding: 20px;
        }
        
        .order-header-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .info-item {
            text-align: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .info-label {
            font-size: 14px;
            color: #666;
            margin-bottom: 5px;
            font-weight: 600;
        }
        
        .info-value {
            font-size: 16px;
            color: #333;
            font-weight: 700;
        }
        
        .order-status {
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
            display: inline-block;
        }
        
        .status-pending { background: #fff3cd; color: #856404; }
        .status-processing { background: #cce5ff; color: #004085; }
        .status-shipped { background: #d4edda; color: #155724; }
        .status-delivered { background: #d1ecf1; color: #0c5460; }
        .status-cancelled { background: #f8d7da; color: #721c24; }
        .status-returned { background: #e2e3e5; color: #383d41; }
        
        .timeline {
            position: relative;
            padding: 20px 0;
        }
        
        .timeline::before {
            content: '';
            position: absolute;
            left: 20px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #e9ecef;
        }
        
        .timeline-item {
            position: relative;
            padding-left: 60px;
            margin-bottom: 30px;
        }
        
        .timeline-item:last-child {
            margin-bottom: 0;
        }
        
        .timeline-icon {
            position: absolute;
            left: 8px;
            top: 0;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: #28a745;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
        }
        
        .timeline-icon.pending {
            background: #e9ecef;
            color: #666;
        }
        
        .timeline-content h4 {
            margin: 0 0 5px;
            color: #333;
        }
        
        .timeline-content p {
            margin: 0;
            color: #666;
            font-size: 14px;
        }
        
        .timeline-date {
            font-size: 12px;
            color: #999;
            margin-top: 5px;
        }
        
        .product-item {
            display: flex;
            gap: 15px;
            padding: 15px 0;
            border-bottom: 1px solid #e9ecef;
            position: relative;
        }
        
        .product-item:last-child {
            border-bottom: none;
        }
        
        .product-image {
            width: 80px;
            height: 80px;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .product-details {
            flex: 1;
        }
        
        .product-name {
            font-weight: 600;
            color: #333;
            margin: 0 0 5px;
        }
        
        .product-price {
            color: #b4883e;
            font-weight: 700;
            margin-bottom: 5px;
        }
        
        .product-quantity {
            color: #666;
            font-size: 14px;
        }
        
        .product-actions {
            display: flex;
            flex-direction: column;
            gap: 8px;
            align-items: flex-end;
        }
        
        .product-total {
            font-weight: 700;
            color: #333;
        }
        
        .address-info {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
        }
        
        .address-info h4 {
            margin: 0 0 10px;
            color: #333;
        }
        
        .address-info p {
            margin: 0 0 5px;
            color: #666;
            line-height: 1.4;
        }
        
        .payment-info {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .payment-icon {
            width: 40px;
            height: 40px;
            background: #b4883e;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }
        
        .payment-details h4 {
            margin: 0 0 5px;
            color: #333;
        }
        
        .payment-details p {
            margin: 0;
            color: #666;
            font-size: 14px;
        }
        
        .order-summary {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
            height: fit-content;
            position: sticky;
            top: 20px;
        }
        
        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            padding-bottom: 10px;
        }
        
        .summary-row.total {
            border-top: 2px solid #e9ecef;
            padding-top: 15px;
            font-size: 18px;
            font-weight: 700;
            color: #333;
        }
        
        .summary-label {
            color: #666;
        }
        
        .summary-value {
            color: #333;
            font-weight: 600;
        }
        
        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-top: 20px;
        }
        
        .btn-full {
            width: 100%;
            justify-content: center;
        }
        
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 0;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
        }
        
        .modal-header {
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-body {
            padding: 20px;
        }
        
        .reason-textarea {
            width: 100%;
            min-height: 100px;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
            font-family: inherit;
        }
        
        @media (max-width: 1024px) {
            .order-detail-container {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .order-summary {
                position: static;
                order: -1;
            }
        }
        
        @media (max-width: 768px) {
            .order-header-info {
                grid-template-columns: 1fr;
                gap: 15px;
            }
            
            .product-item {
                flex-direction: column;
                text-align: center;
            }
            
            .product-image {
                width: 100px;
                height: 100px;
                margin: 0 auto;
            }
            
            .product-actions {
                flex-direction: row;
                justify-content: center;
                align-items: center;
                gap: 15px;
            }
            
            .timeline-item {
                padding-left: 50px;
            }
        }
        
        @media (max-width: 480px) {
            .section-content {
                padding: 15px;
            }
            
            .order-summary {
                padding: 15px;
            }
            
            .timeline::before {
                left: 15px;
            }
            
            .timeline-icon {
                left: 3px;
            }
            
            .timeline-item {
                padding-left: 40px;
            }
        }
    </style>
</head>
<body>
    <%- include('../../partials/userprofile/header') %>
    
    <div class="container">
        <!-- Breadcrumbs -->
        <nav aria-label="breadcrumb" class="mt-4">
            <ol class="breadcrumb" style="background: none; padding: 0; margin: 0; list-style: none; display: flex; gap: 5px;">
                <li class="breadcrumb-item"><a href="/" style="color: #b4883e; text-decoration: none;">Home</a></li>
                <li style="color: #666;"> > </li>
                <li class="breadcrumb-item"><a href="/orders-list" style="color: #b4883e; text-decoration: none;">Orders</a></li>
                <li style="color: #666;"> > </li>
                <li class="breadcrumb-item active" style="color: #333;"><%= order.orderId %></li>
            </ol>
        </nav>

        <div class="order-detail-container">
            <!-- Left Column -->
            <div>
                <!-- Order Header -->
                <div class="detail-section">
                    <div class="section-header">
                        <h3><i class="fas fa-receipt"></i> Order Details</h3>
                    </div>
                    <div class="section-content">
                        <div class="order-header-info">
                            <div class="info-item">
                                <div class="info-label">Order ID</div>
                                <div class="info-value"><%= order.orderId %></div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Order Date</div>
                                <div class="info-value"><%= order.orderDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %></div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Status</div>
                                <div class="info-value">
                                    <span class="order-status status-<%= order.orderStatus %>">
                                        <%= order.orderStatus.charAt(0).toUpperCase() + order.orderStatus.slice(1) %>
                                    </span>
                                </div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Total Amount</div>
                                <div class="info-value">$<%= order.finalAmount.toFixed(2) %></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Order Timeline -->
                <div class="detail-section">
                    <div class="section-header">
                        <h3><i class="fas fa-clock"></i> Order Timeline</h3>
                    </div>
                    <div class="section-content">
                        <div class="timeline">
                            <% 
                                const timelineEvents = [
                                    { status: 'delivered', title: 'Order Delivered', desc: 'Your order has been successfully delivered', date: order.orderDate },
                                    { status: 'shipped', title: 'Order Shipped', desc: 'Your order has been shipped via UPS', date: order.orderDate },
                                    { status: 'processing', title: 'Order Processing', desc: 'Your order is being prepared for shipment', date: order.orderDate },
                                    { status: 'pending', title: 'Order Confirmed', desc: 'Your order has been confirmed ', date: order.orderDate }
                                ].filter(event => order.orderStatus === event.status || (event.status === 'pending' && ['pending', 'processing', 'shipped', 'delivered'].includes(order.orderStatus)));
                            %>
                            <% timelineEvents.forEach(event => { %>
                                <div class="timeline-item">
                                    <div class="timeline-icon <%= order.orderStatus === event.status ? '' : 'pending' %>">
                                        <i class="fas fa-check"></i>
                                    </div>
                                    <div class="timeline-content">
                                        <h4><%= event.title %></h4>
                                        <p><%= event.desc %></p>
                                        <div class="timeline-date">
                                            <%= event.date.toLocaleString('en-US', { month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true }) %>
                                        </div>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    </div>
                </div>

                <!-- Order Items -->
                <div class="detail-section">
                    <div class="section-header">
                        <h3><i class="fas fa-shopping-bag"></i> Order Items (<%= order.items.length %> items)</h3>
                    </div>
                    <div class="section-content">
                        <% order.items.forEach(item => { %>
                            <div class="product-item">
                                <div class="product-image">
                                    <img src="/<%= item.productImage || '/placeholder.svg?height=80&width=80' %>" alt="<%= item.productName %>">
                                </div>
                                <div class="product-details">
                                    <h4 class="product-name"><%= item.productName %></h4>
                                    <div class="product-price">$<%= item.price.toFixed(2) %></div>
                                    <div class="product-quantity">Quantity: <%= item.quantity %></div>
                                </div>
                                <div class="product-actions">
                                    <span class="order-status status-<%= item.status %>"> <%= item.status %></span>
                                    <div class="product-total">$<%= item.totalPrice.toFixed(2) %></div>
                                    <% if ((order.orderStatus === 'pending' || order.orderStatus === 'processing') && item.status !== "cancelled") { %>
                                        <button class="btn btn-outline-primary btn-sm" onclick="cancelProduct('<%= order.orderId %>', '<%= item.productId %>')">
                                            <i class="fas fa-times"></i> Cancel Item
                                        </button>
                                    <% } %>
                                    <% if (order.orderStatus === 'delivered' && item.status !== "return requested" && item.status !== "cancelled") { %>
                                        <button class="btn btn-outline-secondary btn-sm" onclick="returnProduct('<%= order.orderId %>', '<%= item.productId %>')">
                                            <i class="fas fa-undo"></i> Return Item
                                        </button>
                                    <% } %>
                                </div>
                            </div>
                        <% }) %>
                    </div>
                </div>

                <!-- Shipping Address -->
                <div class="detail-section">
                    <div class="section-header">
                        <h3><i class="fas fa-map-marker-alt"></i> Shipping Address</h3>
                    </div>
                    <div class="section-content">
                        <div class="address-info">
                            <h4><%= order.address.firstName %> <%= order.address.lastName %></h4>
                            <p><strong>Phone:</strong> <%= order.address.phone %></p>
                            <p>
                                <%= order.address.address %><br>
                                <%= order.address.state %>, <%= order.address.pinCode %><br>
                                <%= order.address.country %>
                            </p>
                        </div>
                    </div>
                </div>

                <!-- Payment Information -->
                 <% if (order.orderStatus !=="cancelled") { %>
                     <div class="detail-section">
                    <div class="section-header">
                        <h3><i class="fas fa-credit-card"></i> Payment Information</h3>
                    </div>
                    <div class="section-content">
                        <div class="payment-info">
                            <div class="payment-icon">
                                <i class="fas fa-<%= order.paymentMethod === 'cod' ? 'money-bill-wave' : 'credit-card' %>"></i>
                            </div>
                            <div class="payment-details">
                                <h4><%= order.paymentMethod === 'cod' ? 'Cash on Delivery' : 'Online Payment' %></h4>
                                <p><%= order.paymentMethod === 'cod' ? 'Payment will be collected upon delivery' : 'Payment processed online' %></p>
                                <p><strong>Status:</strong> <span style="color: <%= order.paymentStatus === 'completed' ? '#28a745' : '#856404' %>;">
                                    <%= order.paymentStatus.charAt(0).toUpperCase() + order.paymentStatus.slice(1) %>
                                </span></p>
                            </div>
                        </div>
                    </div>
                </div>
                  
                 <% } %>
               
            </div>

            <!-- Right Column - Order Summary -->
            <div class="order-summary">
                <h3 style="margin: 0 0 20px; color: #333;">Order Summary</h3>
                
                <div class="summary-row">
                    <span class="summary-label">Subtotal (<%= order.items.length %> items)</span>
                    <span class="summary-value">$<%= order.totalAmount.toFixed(2) %></span>
                </div>
                
                <div class="summary-row">
                    <span class="summary-label">Discount</span>
                    <span class="summary-value" style="color: #28a745;">-<%= order.discount ? '$' + order.discount.toFixed(2) : '$0.00' %></span>
                </div>
                
                <div class="summary-row">
                    <span class="summary-label">Shipping</span>
                    <span class="summary-value" style="color: #28a745;"><%= order.shipping ? '$' + order.shipping.toFixed(2) : 'Free' %></span>
                </div>
                
                <div class="summary-row">
                    <span class="summary-label">Tax<%= order.tax ? ' (8%)' : '' %></span>
                    <span class="summary-value">$<%= order.tax.toFixed(2) %></span>
                </div>
                
                <div class="summary-row total">
                    <span>Total Amount</span>
                    <span>$<%= order.finalAmount.toFixed(2) %></span>
                </div>
                
                <div class="action-buttons">
                    <a href="/orders" class="btn btn-outline-secondary" style="text-decoration: none;">
                  <i class="fas fa-arrow-left"></i> Back to Orders
                  </a>

                    <% if (order.orderStatus === 'delivered') { %>
                        <button class="btn btn-outline-success btn-full" onclick="downloadInvoice('<%= order.orderId %>')">
                            <i class="fas fa-download"></i> Download Invoice
                        </button>
                    <% } %>
                    <% if (order.orderStatus === 'delivered') { %>
                        <button class="btn btn-outline-warning btn-full" onclick="returnOrder('<%= order.orderId %>')">
                            <i class="fas fa-undo"></i> Return Order
                        </button>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Cancel Product Modal -->
    <div id="cancelProductModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Cancel Product</h3>
                <span class="close" onclick="closeCancelProductModal()">×</span>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to cancel this product from your order?</p>
                <div style="margin: 20px 0;">
                    <label class="form-label">Reason for cancellation (Optional)</label>
                    <textarea class="reason-textarea" id="cancelProductReason" placeholder="Please provide a reason for cancellation..."></textarea>
                </div>
                <div style="display: flex; gap: 15px; justify-content: flex-end;">
                    <button class="btn btn-outline-secondary" onclick="closeCancelProductModal()">Keep Product</button>
                    <button class="btn btn-danger" onclick="confirmCancelProduct()">Cancel Product</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Return Product Modal -->
    <div id="returnProductModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Return Product</h3>
                <span class="close" onclick="closeReturnProductModal()">×</span>
            </div>
            <div class="modal-body">
                <p>Please provide a reason for returning this product:</p>
                <div style="margin: 20px 0;">
                    <label class="form-label">Reason for return *</label>
                    <select class="form-select" id="returnProductReasonSelect" style="margin-bottom: 15px;">
                        <option value="">Select a reason</option>
                        <option value="defective">Product is defective</option>
                        <option value="wrong-item">Wrong item received</option>
                        <option value="not-as-described">Not as described</option>
                        <option value="damaged">Damaged during shipping</option>
                        <option value="changed-mind">Changed my mind</option>
                        <option value="other">Other</option>
                    </select>
                    <textarea class="reason-textarea" id="returnProductReason" placeholder="Please provide additional details..." required></textarea>
                </div>
                <div style="display: flex; gap: 15px; justify-content: flex-end;">
                    <button class="btn btn-outline-secondary" onclick="closeReturnProductModal()">Cancel</button>
                    <button class="btn btn-warning" onclick="confirmReturnProduct()">Submit Return Request</button>
                </div>
            </div>
        </div>
    </div>

    <%- include('../../partials/userprofile/footer') %>

    <script>
        let currentOrderId = null;
        let currentProductId = null;

        function cancelProduct(orderId, productId) {
            currentOrderId = orderId;
            currentProductId = productId;
            document.getElementById('cancelProductModal').style.display = 'block';
        }

        function closeCancelProductModal() {
            document.getElementById('cancelProductModal').style.display = 'none';
            document.getElementById('cancelProductReason').value = '';
            currentOrderId = null;
            currentProductId = null;
        }

        function confirmCancelProduct() {
            const reason = document.getElementById('cancelProductReason').value;
            
            const cancelData = {
                reason: reason || 'No reason provided'
            };
            
            // Fixed: Match backend route - /orders/:orderId/cancel/:productId
            fetch(`/orders/${currentOrderId}/cancel/${currentProductId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(cancelData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    swal("Product Cancelled", "The product has been cancelled successfully. Stock has been updated.", "success").then(() => {
                        closeCancelProductModal();
                        if(data.allItemsCancelled)
                        {
                            window.location.href ="/orders"
                        }
                        window.location.reload();
                    });
                } else {
                    swal("Error", data.message, "error");
                }
            })
            .catch(error => {
                swal("Error", "Failed to cancel product.", "error");
            });
        }

        function returnProduct(orderId, productId) {
            currentOrderId = orderId;
            currentProductId = productId;
            document.getElementById('returnProductModal').style.display = 'block';
        }

        function closeReturnProductModal() {
            document.getElementById('returnProductModal').style.display = 'none';
            document.getElementById('returnProductReason').value = '';
            document.getElementById('returnProductReasonSelect').value = '';
            currentOrderId = null;
            currentProductId = null;
        }

        function confirmReturnProduct() {
            const reasonSelect = document.getElementById('returnProductReasonSelect').value;
            const reasonText = document.getElementById('returnProductReason').value;
            
            if (!reasonSelect || !reasonText.trim()) {
                swal("Error", "Please select a reason and provide additional details for the return.", "error");
                return;
            }
            
            const returnData = {
                productId: currentProductId,
                reason: `${reasonSelect}: ${reasonText}`
            };
            
            // Fixed: Match backend route - /orders/:orderId/return
            fetch(`/orders/${currentOrderId}/return`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(returnData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    swal("Return Request Submitted", "Return request for the product has been submitted successfully.", "success").then(() => {
                        closeReturnProductModal();
                        window.location.reload();
                    });
                } else {
                    swal("Error", data.message, "error");
                }
            })
            .catch(error => {
                swal("Error", "Failed to submit return request.", "error");
            });
        }

        function returnOrder(orderId) {
            swal({
                title: "Return Entire Order?",
                text: "This will initiate a return request for all items in this order.",
                icon: "warning",
                buttons: {
                    cancel: "Cancel",
                    confirm: "Return Order"
                }
            }).then((willReturn) => {
                if (willReturn) {
                    // Prompt for return reason
                    swal({
                        title: "Return Reason",
                        content: {
                            element: "input",
                            attributes: {
                                placeholder: "Please provide a reason for returning this order",
                                type: "text",
                            },
                        },
                        buttons: {
                            cancel: "Cancel",
                            confirm: "Submit Return Request"
                        }
                    }).then((reason) => {
                        if (reason && reason.trim()) {
                            const returnData = {
                                reason: reason.trim()
                            };
                            
                            // Fixed: Match backend route - /orders/:orderId/return
                            fetch(`/orders/${orderId}/return`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(returnData)
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    swal("Return Request Submitted", "Return request for the entire order has been submitted successfully.", "success").then(() => {
                                        window.location.reload();
                                    });
                                } else {
                                    swal("Error", data.message, "error");
                                }
                            })
                            .catch(error => {
                                swal("Error", "Failed to submit return request.", "error");
                            });
                        } else if (reason !== null) {
                            swal("Error", "Please provide a reason for the return.", "error");
                        }
                    });
                }
            });
        }

        function downloadInvoice(orderId) {
            swal("Downloading Invoice", `Invoice for order ${orderId} is being downloaded...`, "success");
            // Fixed: Match backend route - /orders/:orderId/invoice (GET request)
            window.open(`/orders/${orderId}/invoice`, '_blank');
        }

        function reorderItems(orderId) {
            swal({
                title: "Reorder Items?",
                text: "Add all items from this order to your cart?",
                icon: "info",
                buttons: {
                    cancel: "Cancel",
                    confirm: "Add to Cart"
                }
            }).then((willReorder) => {
                if (willReorder) {
                    // Note: This route doesn't exist in your backend routes
                    // You'll need to add this route or modify this function
                    fetch(`/orders/${orderId}/reorder`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            swal("Items Added!", "All items have been added to your cart.", "success");
                        } else {
                            swal("Error", data.message, "error");
                        }
                    })
                    .catch(error => {
                        swal("Error", "Failed to reorder items.", "error");
                    });
                }
            });
        }

        function contactSupport(orderId) {
            window.location.href = `/support?order=${orderId}`;
        }

        window.onclick = function(event) {
            const cancelModal = document.getElementById('cancelProductModal');
            const returnModal = document.getElementById('returnProductModal');
            
            if (event.target === cancelModal) {
                closeCancelProductModal();
            }
            if (event.target === returnModal) {
                closeReturnProductModal();
            }
        }

        document.querySelector('.canvas__open').addEventListener('click', () => {
            document.querySelector('.header__menu').classList.toggle('active');
        });
    </script>

</body>
</html>